%YAML:1.0

#common parameters
imu_topic: "/zed2i/zed_node/imu/data_raw"
image_topic: "/zed2i/zed_node/rgb_raw/image_raw_color"
output_path: "/home/ghpak/Vins_mono/result"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 960
image_height: 540

distortion_parameters:
   k1: -0.07253575 #-1.2514
   k2: 0.06272369  #2.375849
   p1: -0.00102158 #0.125266
   p2: 0.00360962  #0.000229
projection_parameters:
   fx: 539.12184959 #533.7050
   fy: 537.93396235  #533.9050
   cx: 477.46520972 #476.66
   cy: 270.09177125  #273.0648

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 2   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.99964621,  0.01105994,  0.02418954,
           -0.01088975,  0.9999151,  -0.00715601, 
           -0.02426663,  0.00689006,  0.99968178]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.07494282, -0.01077138, -0.00641822]

#feature traker paprameters
max_cnt: 400            # max feature number in feature tracking
min_dist: 40            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

# imu parameters       The more accurate parameters you provide, the worse performance
acc_n: 1.5344305194375052e-02 # 0.1                            # accelerometer measurement noise standard deviation.
gyr_n: 1.2405595186251951e-03 # 0.01                           # gyroscope measurement noise standard deviation.
acc_w: 0.024812904628149092   # 0.001                          # accelerometer bias random work noise standard deviation.
gyr_w: 0.00226647210734021    # 2.0e-5                         # gyroscope bias random work noise standard deviation.
g_norm: 9.81007                       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/tony-ws1/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 1        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ